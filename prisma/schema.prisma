// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProfileEnum {
  USER
  SUPER_USER
}

enum PostCategoryEnum {
  TECHNOLOGY
  UNIVERSITY
  LIFESTYLE
  RESEARCH
}

model User {
  id       Int         @id @default(autoincrement())
  name     String
  email    String      @unique
  password String
  profile  ProfileEnum
  phone    String
  blacklistTokens String[] @default([])

  students   Student[]
  professors Professor[]
  materials  Material[]
  schedules  labSchedule[]
  posts      Post[]

  @@map("users")
}

model Student {
  enrollment String @id
  user_id    Int

  user User @relation(fields: [user_id], references: [id])

  @@map("students")
}

model Professor {
  enrollment String @id
  user_id    Int

  disciplines Discipline[]
  user        User         @relation(fields: [user_id], references: [id])

  @@map("professors")
}

model Discipline {
  id                    Int    @id @default(autoincrement())
  name                  String
  professor_enrollement String

  classes   Class[]
  professor Professor @relation(fields: [professor_enrollement], references: [enrollment])

  @@map("disciplines")
}

model Class {
  id            Int    @id @default(autoincrement())
  start_time    String
  end_time      String
  day_week      String
  discipline_id Int

  discipline Discipline @relation(fields: [discipline_id], references: [id])

  @@map("classes")
}

model Material {
  id          Int          @id @default(autoincrement())
  title       String
  url         String
  description String       @db.Text
  type        TypeMaterial
  user_id     Int

  user User @relation(fields: [user_id], references: [id])

  @@map("materials")
}

enum TypeMaterial {
  DIDATICO
  FORMAL
}

model labSchedule {
  id         Int    @id @default(autoincrement())
  start_time String
  end_time   String
  date       String
  user_id    Int
  lab_id     Int

  user User @relation(fields: [user_id], references: [id])
  lab  Lab  @relation(fields: [lab_id], references: [id])

  @@map("lab_schedule")
}

model Lab {
  id   Int    @id
  code String
  name String

  schedules labSchedule[]

  @@map("labs")
}

model Post {
  id         Int              @id @default(autoincrement())
  title      String
  content    String
  created_at DateTime         @default(now())
  category   PostCategoryEnum

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  @@map("post")
}
